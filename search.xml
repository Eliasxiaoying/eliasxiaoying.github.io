<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>消息队列（一）</title>
      <link href="/2023/08/06/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/08/06/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="消息中间件概述"><a href="#消息中间件概述" class="headerlink" title="消息中间件概述"></a>消息中间件概述</h2><h3 id="系统之间请求的两种方式"><a href="#系统之间请求的两种方式" class="headerlink" title="系统之间请求的两种方式"></a>系统之间请求的两种方式</h3><ol><li>RPC远程方法调用 <strong>同步调用，需要等待远程方法返回</strong></li><li>MQ消息队列 <strong>异步调用或不需要返回内容，不需要等待远程方法返回</strong></li></ol><p>RPC（Remote Process Call远程过程调用）的主要功能目标是让构建分布式计算（应用）更容易，在提供强大的远程调用能力时不损失本地调用的语义简洁性.它具有分布式设计、部署灵活、服务解耦、扩展性强等优点。但是通常RPC调用都是同步、阻塞的，且为了实现RPC调用，我们通常还会采用一些其他的方式保证服务的可用性与扩展性，这就带来了微服务中的服务注册与发现、健康检测、负载均衡、服务治理、熔断限流等等相关组件，服务之间产生了强依赖关系，这无疑是背离了RPC的初衷。</p><p>而消息队列则刚好提供了另外一种服务之间数据传递与转换的方式。消息队列是异步的、并且只需要维护好消息队列的可用性与扩展性，而无需引入其他组件，此外消息队列还有许多其他的优点。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>异步解耦：在一个庞大的业务系统中, 通过对于主要业务模块和其他业务模块之间进行业务解耦<ol><li>可以保障整体系统的稳定性, 比如物流系统在某一个时刻出现故障, 并不会影响用户下单、浏览商品等其他操作</li><li>提高用户的响应速度, 比如以前没有消息中间件, 需要400ms的处理时间, 现在引入消息中间件只需要110ms的处理时间</li></ol></li></ol><p><img src="/images/images3.png" alt="upload successful"></p><ol><li>削峰填谷<ol><li>在应用系统架构的时候引入了消息中间件MQ之后, 所有的用户请求全部先到达消息中间件MQ, 然后业务系统从MQ读取对应的消息进行业务处理，假设其中业务系统的处理的封装是1w/qps,。</li><li>当用户请求的qps在低于一万的时候, 用户的请求可以正常的处理</li><li>当用户请求在某一个时刻突然高于1w/qps的时候，比如在达到3w/qps的时候，对于业务系统则可以达到自己的处理封装1w/qps，消息中间件则可以达到3w/qps，</li><li>这个时候会有很多的消息在消息中间件堆积，等待业务系统处理，这时消息中间件起到一个削峰的作用。</li><li>当业务系统相对来说比较空闲的时候，用户的请求低于1w/qps的时候，那么对于mq的处理能力是和用户处理能力一样，但是对于应用系统可能还是在维持一个峰值(1w/qps)进行业务处理，这是消息中间件起到一个填谷的作用。</li></ol></li></ol><p><img src="/images/images4.png" alt="upload successful"></p><ol><li>消息分发<ol><li>在双十一，618这种大促销活动，商家的同一件商品可能会有很多的分会场，对于价格的变化需要及时的通知到分会场</li><li>如果大量的并发访问数据库, 会导致页面响应缓慢, 我们可以通过MQ构建分布式缓存, 及时的通知到分会场商品数据的变化</li><li>可以实现数据实时更新，降低页面响应时间，满足大规模的数据访问</li></ol></li></ol><p><img src="/images/images5.png" alt="upload successful"></p><h3 id="常见的消息中间件"><a href="#常见的消息中间件" class="headerlink" title="常见的消息中间件"></a>常见的消息中间件</h3><p>ActiveMQ、RabbitMQ、Kafka、RocketMQ</p><p><img src="/images/images6.png" alt="upload successful"></p><h3 id="ROCKETMQ的核心特性"><a href="#ROCKETMQ的核心特性" class="headerlink" title="ROCKETMQ的核心特性"></a>ROCKETMQ的核心特性</h3><ol><li>低延迟 1ms内响应的延迟超过99.6%</li><li>高稳定性<ol><li>服务可用性 99.95%，Region 化、多可用区、分布式集群化部署，确保服务高可用，即便整个机房不可用仍可正常提供消息服务</li><li>数据可靠性 99.99999999%，同步双写、超三副本数据冗余与快速切换技术确保数据可靠；</li></ol></li><li>高性能<ol><li>历年双 11 购物狂欢节零点千万级 TPS、万亿级数据洪峰，创造了全球最大的业务消息并发以及流转纪录（日志类消息除外）；</li><li>在始终保证高性能前提下，支持亿级消息堆积，不影响集群的正常服务，在削峰填谷（蓄洪）、微服务解耦的场景下尤为重要；</li></ol></li><li>丰富的消息类型 提供丰富的消息类型，满足各种严苛场景下的高级特性需求，当前支持的消息类型涵盖普通消息、顺序消息（全局顺序 / 分区顺序）、分布式事务消息、定时消息/延时消息；</li></ol><h2 id="ROCKETMQ的核心组件"><a href="#ROCKETMQ的核心组件" class="headerlink" title="ROCKETMQ的核心组件"></a>ROCKETMQ的核心组件</h2><h3 id="运行模型"><a href="#运行模型" class="headerlink" title="运行模型"></a>运行模型</h3><ol><li>名称服务NameServer，NameServer的作用类似于Zookeeper这样的注册中心，主要用于存储元数据的管理，比如每个Topic的位置信息 </li><li>代理服务Broker，Broker是数据处理服务器，对于不同的消息，存储在不同的Topic中，在同一个Topic中，为了提高消息处理的并发能力, 一个Topic会有多个Queue队列</li><li>生产者Producer，连接NameServer, 获取对应的Topic信息, 开始创建消息并发送</li><li>消费者Consumer，连接NameServer, 获取对应的Topic信息, 开始消费消息</li></ol><p><img src="/images/images7.png" alt="upload successful"></p><h3 id="NameServer"><a href="#NameServer" class="headerlink" title="NameServer"></a>NameServer</h3><p>名称服务充当路由消息队列元数据的提供者，生产者或消费者能够通过名称服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>消息代理服务，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。</p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>为了提高消息处理的并发度, 每个消息主题Topic会有多个Queue</p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>生产者，负责生产消息，一般由业务系统负责生产消息。<br>一个消息生产者会把业务应用系统里产生的消息发送到Broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</p><h3 id="Comsumer"><a href="#Comsumer" class="headerlink" title="Comsumer"></a>Comsumer</h3><p>消费者，负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息，并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。</p><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><p>消息内容 消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。</p><h2 id="单机环境安装"><a href="#单机环境安装" class="headerlink" title="单机环境安装"></a>单机环境安装</h2><h3 id="ROCKETMQ的安装"><a href="#ROCKETMQ的安装" class="headerlink" title="ROCKETMQ的安装"></a>ROCKETMQ的安装</h3><ol><li>源码安装依赖<code>JDK1.8+</code>和<code>Maven3.2+</code></li><li>下载源码包到指定的位置：<code>wget https://archive.apache.org/dist/rocketmq/4.7.0/rocketmq-all-4.7.0-source-release.zip</code></li><li>解压源码包到/usr/local/src路径下 <code>unzip rocketmq-all-4.7.0-source-release.zip -d /usr/local/src</code></li><li>执行maven构建</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn -Prelease-all -Dmanve.test.skip=true clean install -U</span><br><span class="line"><span class="meta">#</span><span class="bash"> -P激活指定的环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -U 强制更新本地仓库的文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当构建完成以后, 二进制文件存放在distribution/target目录中</span></span><br></pre></td></tr></table></figure><h3 id="管理控制台安装"><a href="#管理控制台安装" class="headerlink" title="管理控制台安装"></a>管理控制台安装</h3><ol><li>使用git工具下载源码或自行下载源码<ol><li><code>yum install -y git</code></li><li><code>git clone https://gitee.com/heshengjun/rocketmq-externals.git</code></li></ol></li><li>执行Maven构建 <code>mvn package -Dmaven.test.skip=true</code></li><li>启动管理控制台<ol><li>启动rocket服务, 在启动管理控制台之前, 必须先启动NameServer</li><li>在启动目录创建一个application.properties，并指定对应的</li></ol></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台运行端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"># rocketmq的名称服务地址</span></span><br><span class="line"><span class="meta">rocketmq.config.namesrvAddr</span>=<span class="string">127.0.0.1:9876</span></span><br></pre></td></tr></table></figure><pre><code>  3. 启动控制台，并在后台运行 `nohup java -jar rocketmq-console-ng-1.0.1.jar &amp;`</code></pre><h3 id="运行测试程序"><a href="#运行测试程序" class="headerlink" title="运行测试程序"></a>运行测试程序</h3><p>使用rocktmq自带的测试程序对mq进行测试</p><ol><li>设置名称服务的环境变量 <code>export  NAMESRV_ADDR=127.0.0.1:9876</code></li><li>启动生产者 <code>bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</code></li><li>启动消费者 <code>bin/tools.sh  org.apache.rocketmq.example.quickstart.Consumer</code></li></ol><h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><ol><li>生产者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者入门案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 创建一个生产者</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"maoge"</span>);</span><br><span class="line">        <span class="comment">//2 指定NameServer的地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"192.168.48.102:9876"</span>);</span><br><span class="line">        <span class="comment">//3 启动生产者</span></span><br><span class="line">        producer.start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 4 创建消息对象 指定消息的topic为 01_hello</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message(<span class="string">"01_hello"</span>, (<span class="string">"hello"</span> + i).getBytes());</span><br><span class="line">            <span class="comment">// 5 发送消息</span></span><br><span class="line">            SendResult result = producer.send(msg);</span><br><span class="line">            System.out.println(result.getSendStatus());</span><br><span class="line">            System.out.println(<span class="string">"result.getMsgId() = "</span> + result.getMsgId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6 关闭应用程序</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>消费者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line">        <span class="comment">//1 创建一个消费者对象</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"maoge"</span>);</span><br><span class="line">        <span class="comment">// 设置NameServer的地址</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.48.102:9876"</span>);</span><br><span class="line">        <span class="comment">//2 指定消费的topic</span></span><br><span class="line">        consumer.subscribe(<span class="string">"01_hello"</span>,<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//3 指定从哪个位置开始消费(只是对第一次启动消费的时候有效果)</span></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);</span><br><span class="line">        <span class="comment">//4 指定一个监听器, 并发消费消息</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (MessageExt messageExt : list) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"收到消息:"</span>+<span class="keyword">new</span> String(messageExt.getBody()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//5 启动消费者</span></span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><h4 id="同步发送消息"><a href="#同步发送消息" class="headerlink" title="同步发送消息"></a>同步发送消息</h4><p>指在发送数据到消息中间件的时候, 需要及时的返回消息发送结果到发送方，这种可靠性同步地发送方式使用的比较广泛，比如：重要的消息通知，短信通知。</p><p><img src="/images/images8.png" alt="upload successful"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String group = <span class="string">"group1"</span>;</span><br><span class="line">        <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(group);</span><br><span class="line">        producer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer.start();</span><br><span class="line">            Message message = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                message = <span class="keyword">new</span> Message(<span class="string">"_01_sync"</span>, <span class="string">"Hello RocketMQ"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                SendResult result = producer.send(message);</span><br><span class="line">                System.out.println(JSON.toJSONString(result));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            System.out.println(ex.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            producer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="异步发送消息"><a href="#异步发送消息" class="headerlink" title="异步发送消息"></a>异步发送消息</h4><p>指把数据发送到消息中心不等待消息中心的返回结果，而是程序继续往下执行, 当有结果返回的时候, 通过异步通知的方式告诉消息发送方。<br>异步消息通常用在对响应时间敏感的业务场景，即发送端不能容忍长时间地等待Broker的响应。</p><p><img src="/images/images9.png" alt="upload successful"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"group1"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(group);</span><br><span class="line">    producer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"生产者启动失败"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Message message = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            message = <span class="keyword">new</span> Message(<span class="string">"_02_async"</span>, <span class="string">"Hello RocketMQ"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            producer.send(message, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getId());</span><br><span class="line">                    <span class="keyword">if</span> (sendResult.getSendStatus() == SendStatus.SEND_OK) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"消息发送成功"</span> + JSON.toJSONString(sendResult));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"消息发送失败"</span> + JSON.toJSONString(sendResult));</span><br><span class="line">                    &#125;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                    System.out.println(throwable.getMessage());</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"消息发送失败:客户端异常"</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"消息发送失败:远程异常"</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"消息发送失败:线程中断异常"</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一次性发送消息"><a href="#一次性发送消息" class="headerlink" title="一次性发送消息"></a>一次性发送消息</h4><p>这种方式主要用在不特别关心发送结果的场景，例如日志发送，大数据场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"group1"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(group);</span><br><span class="line">    producer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">"_01_sync"</span>, <span class="string">"Hello RocketMQ"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            producer.sendOneway(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者组"><a href="#生产者组" class="headerlink" title="生产者组"></a>生产者组</h4><p>同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。生产者在创建时通过producerGroup指定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"group1"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定生产者组名称为group </span></span><br><span class="line">    DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(group);</span><br><span class="line">    producer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">"_01_sync"</span>, <span class="string">"Hello RocketMQ"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            producer.sendOneway(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息封装"><a href="#消息封装" class="headerlink" title="消息封装"></a>消息封装</h4><p>Tag：用来给消息进行标记，可以通过Tag对消息进行分类，把不同类型的消息交给不同的消费者进行消费<br>Key<strong>：</strong>可以设置消息的一个唯一ID，用于区分每个消息的标志，业务ID，并且在管理控制台，可以通过Key进行消息的查询跟踪</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"group1"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(group);</span><br><span class="line">    producer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">"_01_sync"</span>, <span class="string">"TagA"</span>, i + <span class="string">""</span>, <span class="string">"Hello RocketMQ"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            producer.sendOneway(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h3><h4 id="消费方式-拉取消费"><a href="#消费方式-拉取消费" class="headerlink" title="消费方式-拉取消费"></a>消费方式-拉取消费</h4><p>由消费者主动从消息队列中拉取消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String group = <span class="string">"consumer"</span>;</span><br><span class="line">        <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">        DefaultLitePullConsumer consumer = <span class="keyword">new</span> DefaultLitePullConsumer(group);</span><br><span class="line">        consumer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            consumer.subscribe(<span class="string">"_04_pull"</span>, <span class="string">"*"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            consumer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            List&lt;MessageExt&gt; msgs = consumer.poll();</span><br><span class="line">            msgs.forEach(msg -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(msg.getBody()));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="消费方式-推送消费"><a href="#消费方式-推送消费" class="headerlink" title="消费方式-推送消费"></a>消费方式-推送消费</h4><p>由消息队列主动推送消息到消费者（需要消费者先绑定消费事件）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推式消费 消息中心 主动把消息推送给  消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"type"</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.48.102:9876"</span>);</span><br><span class="line">        <span class="comment">//订阅主题, 后面可以指定表达式Tag, 根据tag进行消息过滤</span></span><br><span class="line">        consumer.subscribe(<span class="string">"01_hello"</span>,<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//注册消息消费监听 有消息就会触发consumeMessage方法</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"接收消息线程: "</span>+Thread.currentThread().getName());</span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"接收到的消息:"</span>+<span class="keyword">new</span> String(msg.getBody()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//确定消息消费从</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//启动消费者</span></span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费模式-集群模式"><a href="#消费模式-集群模式" class="headerlink" title="消费模式-集群模式"></a>消费模式-集群模式</h4><p>MessageModel.CLUSTERING：对于同一个消费者组里面的多个消费者, 每个消费者消费的消息都是不一样的, 相当于消费者的负载均衡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"ConsumerModel"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(group);</span><br><span class="line">    <span class="comment">// 设置消费者的消息模型为集群模式</span></span><br><span class="line">    consumer.setMessageModel(MessageModel.CLUSTERING);</span><br><span class="line">    consumer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String consumerName = <span class="string">"消费者1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        consumer.subscribe(<span class="string">"_05_model"</span>, <span class="string">"*"</span>);</span><br><span class="line">        consumer.registerMessageListener((MessageListenerConcurrently) (list, consumeConcurrentlyContext) -&gt; &#123;</span><br><span class="line">            list.forEach(msg -&gt; System.out.println(consumerName + <span class="string">"消费消息:"</span> + list.indexOf(msg) + <span class="string">"成功。"</span> + <span class="keyword">new</span> String(msg.getBody())));</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(consumerName + <span class="string">"启动成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费模式-广播模式"><a href="#消费模式-广播模式" class="headerlink" title="消费模式-广播模式"></a>消费模式-广播模式</h4><p>MessageModel.BROADCASTING：每个消费者都会接受全量的消息，所有消费者消费的数据都是一样的，一般用于对于消息需要多个其他业务进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"ConsumerModel"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(group);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置消费者的消息模型为广播模式</span></span><br><span class="line">    consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><span class="line">    consumer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String consumerName = <span class="string">"消费者1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        consumer.subscribe(<span class="string">"_05_model"</span>, <span class="string">"*"</span>);</span><br><span class="line">        consumer.registerMessageListener((MessageListenerConcurrently) (list, consumeConcurrentlyContext) -&gt; &#123;</span><br><span class="line">            list.forEach(msg -&gt; System.out.println(consumerName + <span class="string">"消费消息:"</span> + list.indexOf(msg) + <span class="string">"成功。"</span> + <span class="keyword">new</span> String(msg.getBody())));</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(consumerName + <span class="string">"启动成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认消息会按照轮询的方式发送给Topic中的每个队列，消费者在集群模式下，当连接到主题上时会预先分配消费者将要消费的队列，以实现消息的集群消费。<br>队列数量默认情况下最多为4个。</p><h4 id="消息消费位点"><a href="#消息消费位点" class="headerlink" title="消息消费位点"></a>消息消费位点</h4><p>在指定消费的pos位置的时候，会优先获取服务端记录的上次消费点，<strong>该参数只有在服务端没有对应的消费者的记录的时候有效，一般情况是第一次启动的消费者有效。如果存在消费记录会记录消费位点，再次启动时会从指定的消费位点之后开始消费。</strong></p><ol><li><strong>CONSUME_FROM_FIRST_OFFSET</strong>：从最开始的位置消费，消息该Topic下面所有的有效的数据，过期的数据会删除掉。</li><li><strong>CONSUME_FROM_LAST_OFFSET</strong>：如果该Topic的数据都是最近的数据，没有过期数据，则从最开始的位置消费；如果该Topic的数据存在过期的数据，则从最后的位置开始消费，只会消费新加入的数据。</li><li><strong>CONSUME_FROM_TIMESTAMP</strong>：根据指定的时间戳进行消费，配合<code>consumer.setConsumeTimestamp(&quot;20200612083300&quot;);</code>从指定的时间开始消费，如果不指定，则默认从半个小时前的数据开始消费。</li><li>如果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"ConsumerModel"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(group);</span><br><span class="line">    consumer.setMessageModel(MessageModel.CLUSTERING);</span><br><span class="line">    consumer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果消息过期，则从最近的消息开始消费</span></span><br><span class="line">    consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定时间之后</span></span><br><span class="line">    consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_TIMESTAMP);</span><br><span class="line">    consumer.setConsumeTimestamp(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        consumer.subscribe(<span class="string">"_06_position"</span>, <span class="string">"*"</span>);</span><br><span class="line">        consumer.registerMessageListener((MessageListenerConcurrently) (list, consumeConcurrentlyContext) -&gt; &#123;</span><br><span class="line">            list.forEach(msg -&gt; System.out.println(<span class="keyword">new</span> String(msg.getBody())));</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息消费确认-拉式消费："><a href="#消息消费确认-拉式消费：" class="headerlink" title="消息消费确认-拉式消费："></a>消息消费确认-拉式消费：</h4><ol><li>可以通过consumer.setAutoCommit(false)；设置是否自动提交，如果设置为手动提交, 需要使用consumer.commitSync()；方法进行手动提交；</li><li>对于未提交的操作，Topic中的订阅的偏移量是不会发生改变的，下次消费的时候会继续消费改数据。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"consumer"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    DefaultLitePullConsumer consumer = <span class="keyword">new</span> DefaultLitePullConsumer(group);</span><br><span class="line">    consumer.setNamesrvAddr(nameServer);</span><br><span class="line">    consumer.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        consumer.subscribe(<span class="string">"_07_ack"</span>, <span class="string">"*"</span>);</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;MessageExt&gt; messages = consumer.poll();</span><br><span class="line">        messages.forEach(message -&gt; System.out.println(<span class="string">"消息消费成功："</span> + <span class="keyword">new</span> String(message.getBody())));</span><br><span class="line">        <span class="comment">// 在提交消费成功之前不会确认消费，不会改变偏移量，每次启动都会重新开始消费</span></span><br><span class="line">        consumer.commitSync();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息消费确认-推式消费"><a href="#消息消费确认-推式消费" class="headerlink" title="消息消费确认-推式消费"></a>消息消费确认-推式消费</h4><ol><li>通过返回ConsumeConcurrentlyStatus.CONSUME_SUCCESS状态表示消费成功，返回ConsumeConcurrentlyStatus.RECONSUME_LATER 表示消费不成功，会放入到重试队列。</li><li>默认重试采用服务端重试；重试次数：16次。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String group = <span class="string">"consumer"</span>;</span><br><span class="line">    <span class="keyword">final</span> String nameServer = <span class="string">"localhost:9876"</span>;</span><br><span class="line"></span><br><span class="line">    DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(group);</span><br><span class="line">    consumer.setNamesrvAddr(nameServer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        consumer.subscribe(<span class="string">"_07_ack"</span>, <span class="string">"*"</span>);</span><br><span class="line">        consumer.registerMessageListener((MessageListenerConcurrently) (list, consumeConcurrentlyContext) -&gt; &#123;</span><br><span class="line">            list.forEach(message -&gt; System.out.println(<span class="string">"消息消费成功："</span> + <span class="keyword">new</span> String(message.getBody())));</span><br><span class="line">            <span class="comment">// 稍后再次消费，但是会改变消费者偏移量，但是会放到重试队列中</span></span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> Rocket MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IdentityServer 介绍</title>
      <link href="/2023/07/30/IdentityServer-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/07/30/IdentityServer-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p># Identity Server 4 介绍</p><h2 id="什么是-Cookies、Session"><a href="#什么是-Cookies、Session" class="headerlink" title="什么是 Cookies、Session"></a>什么是 Cookies、Session</h2><p><strong>Cookies 是存储在客户端浏览器中的小型文本文件</strong>，用于存储 Web 应用程序的用户身份验证信息和其他状态信息。当用户访问 Web 应用程序时，服务器可以向客户端浏览器发送一个包含Cookie 信息的HTTP响应头。浏览器会将这些 Cookie 信息存储在本地，并在随后的每个请求中将它们作为 HTTP 请求头发送回服务器。这使得 Web 应用程序能够在多个请求之间保持状态，并保证用户的身份验证信息得以保留。Cookies 可以设置过期时间，以便浏览器在一定时间后删除它们。</p><p><strong>Session 是一种在Web服务器上存储用户状态信息的机制</strong>。当用户首次访问 Web 应用程序时，服务器会创建一个新的 Session，并将 Session ID（一种唯一的标识符）发送到客户端浏览器中。浏览器会将该 Session ID 作为Cookie信息存储在本地，并在随后的每个请求中将其作为HTTP 请求头发送回服务器。服务器使用 Session ID 来检索与该用户相关联的状态信息，并在每个请求期间更新它们。Session 与 Cookie 的关系在于，Session ID 通常是存储在 Cookie 中的，以便浏览器可以在每个请求中将其发送回服务器。</p><p><strong>最早的Web应用程序使用 HTTP Authentication 来实现身份验证和授权。</strong>这种认证机制需要用户在每个请求中提供用户名和密码，服务器通过比较这些信息来验证用户身份。虽然这种机制简单易用，但它存在一些安全问题，如明文传输密码等。</p><p>随着 Web 应用程序的发展，Cookie 成为一种用于存储用户认证信息的常见方法。当用户首次进行身份验证时，服务器会向客户端浏览器发送一个 Cookie，包含一个加密的身份验证令牌。浏览器在随后的每个请求中都会附带该 Cookie，以便服务器识别用户。这种基于 Cookie 的认证机制比HTTP Authentication 更安全，但仍然存在一些安全问题，如 Cookie 劫持等。</p><blockquote><p>Cookie劫持是一种网络攻击，攻击者通过窃取用户的Cookie来冒充用户身份，从而获取未经授权的访问权限。一旦攻击者窃取了用户的Cookie，就可以将其复制到自己的浏览器中，并在随后的请求中使用该Cookie来冒充用户身份，从而获取未经授权的访问权限。</p></blockquote><p>为了解决Cookie劫持等安全问题，Web应用程序开始使用基于Session的认证机制。在这种机制中，服务器为每个用户创建一个Session，并将Session ID存储在Cookie中。随后的每个请求都会附带该Cookie，以便服务器识别用户。这种机制比基于Cookie的认证更加安全，但仍然存在一些问题，如Session劫持等。</p><p>随着分布式系统和基于微服务的应用程序的兴起，基于Token的认证机制逐渐成为一种流行的选择。在这种机制中，服务器会为每个用户生成一个加密的 Token，并将其发送到客户端浏览器中。浏览器在随后的每个请求中都会附带该Token，以便服务器识别用户。这种机制不需要在服务器上存储任何状态信息，更加适用于分布式系统和基于微服务的应用程序。</p><h2 id="为什么使用Token"><a href="#为什么使用Token" class="headerlink" title="为什么使用Token"></a>为什么使用Token</h2><p><strong>安全性高</strong>、<strong>移植性强</strong></p><ol><li>安全性高：Token可以加密，并且<strong>能够验证是否被修改，安全性更高。</strong></li><li>移植性强：Cookie是浏览器进行控制的，Session是存储在服务器中的，Token<strong>无状态（只存储用户的部分关键信息）</strong>，是<strong>由客户端进行管理</strong>的，且<strong>可以跨域使用</strong>，<strong>可以在多个设备之间共享、可以单独存储</strong>。</li></ol><p>随着分布式系统和基于微服务的应用程序的兴起，基于Token的认证机制逐渐成为一种流行的选择。在这种机制中，服务器会为每个用户生成一个加密的Token，并将其发送到客户端浏览器中。浏览器在随后的每个请求中都会附带该Token，以便服务器识别用户。这种机制不需要在服务器上存储任何状态信息，更加适用于分布式系统和基于微服务的应用程序。</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><p>上面是一个 <code>JWT Token</code>的示例</p><p><code>JWT Token</code> 由三部分组成：Header（头部）、Payload（载荷）和 Signature（签名）。其中，Header 包含了 <code>JWT Token</code> 的类型和使用的算法等信息，Payload 包含了要传输的信息，例如用户ID、用户名、角色等，Signature 则是对 Header 和 Payload 的签名，用于验证数据的完整性和真实性。</p><h2 id="为什么要使用-Identity-Server"><a href="#为什么要使用-Identity-Server" class="headerlink" title="为什么要使用 Identity Server"></a>为什么要使用 Identity Server</h2><p><img src="/images/pasted-4.png" alt="upload successful"></p><ol><li>联合登陆：通过开放认证平台由第三方应用做身份担保，使用户可以活得本系统的相关权限。</li><li>单点登陆：将用户的信息集中管理，不同系统之间对用户信息进行共享。</li></ol><h2 id="Identity-Server-能做什么"><a href="#Identity-Server-能做什么" class="headerlink" title="Identity Server 能做什么"></a>Identity Server 能做什么</h2><p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">OAuth 2.0 的一个简单解释 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><p><a href="https://www.cnblogs.com/yangxu-pro/p/9405796.html" target="_blank" rel="noopener">学习Identity Server 4的预备知识 (误删, 重补) - yangxu-pro - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/savorboard/p/aspnetcore-identity.html" target="_blank" rel="noopener">ASP.NET Core 之 Identity 入门（一） - Savorboard - 博客园 (cnblogs.com)</a></p><p>简单来说，Identity Server 中实现了两种功能，分别对应了两种协议：</p><p>认证 <code>Authentication</code>：解决了 <strong>”你是谁“</strong> 的问题。 对应协议：<code>OpenIdConnect</code></p><p>授权 <code>Authorization</code>：解决了 <strong>”你能做什么，不能做什么“</strong> 的问题。对应协议：<code>OAuth2.0</code></p><h2 id="授权认证的五种模式"><a href="#授权认证的五种模式" class="headerlink" title="授权认证的五种模式"></a>授权认证的五种模式</h2><p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener">OAuth 2.0 的四种方式 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><ol><li>密码式（password）</li><li><p>客户端凭证（client credentials）</p></li><li><p>交互式（implicit）</p></li></ol><p><img src="/images/images0.png" alt="upload successful"></p><ol><li>授权码式（authorization-code）</li></ol><p><img src="/images/images1.png" alt="upload successful"></p><ol><li>设备流式（deviceflow）</li></ol><p><img src="/images/images2.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是一篇来自hexo-admin的测试文章</title>
      <link href="/2023/07/16/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%9D%A5%E8%87%AAhexo-admin%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2023/07/16/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%9D%A5%E8%87%AAhexo-admin%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p><a name="ejMt9"></a></p><h2 id="登录会话保存配置"><a href="#登录会话保存配置" class="headerlink" title="登录会话保存配置"></a>登录会话保存配置</h2><p>IdentityServer注册了两个Cookie处理程序用于处理用户登录</p><ul><li><code>IdentityServerConstants.DefaultCookieAuthenticationScheme</code> 默认Cookie身份验证模式</li><li><code>IdentityServerConstants.ExternalCookieAuthenticationScheme</code>外部Cookie身份验证模式</li></ul><p>可以在注入的过程中对这两个Cookie进行配置，如设置滑动过期时间等<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">builder</span><br><span class="line">    .Services.AddAuthentication()</span><br><span class="line">    .AddCookie(IdentityServerConstants.DefaultCookieAuthenticationScheme, options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 配置默认验证模式的滑动过期时间为30分钟</span></span><br><span class="line">        options.SlidingExpiration = <span class="literal">true</span>;</span><br><span class="line">        options.ExpireTimeSpan = TimeSpan.FromMinutes(<span class="number">30</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>也可以通过IdentityServer指定用于默认身份验证和外部身份验证的不同模式名称<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddIdentityServer(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 指定IdentityServer使用 Cookies 进行身份验证；</span></span><br><span class="line">    options.Authentication.CookieAuthenticationScheme = <span class="string">"Cookies"</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><strong>注意：IdentityServer 在内部使用自定义方案（通过常量）调用 AddAuthentication() ，因此要覆盖它们，必须在 AddIdentityServer() 之后进行相同的调用。</strong><br><a name="wApZs"></a></p><h2 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h2><p>当 IdentityServer 在授权端点收到请求并且用户未经过身份验证时，用户将被重定向到配置的登录页面。<br />可以通过选项 UserInteraction 上的设置告知 IdentityServer 登录页面的路径（默认为<code>/account/login</code>）。<br />此外还将传递一个 <code>returnUrl</code> 参数，当用户登录成功后应将用户重定向到何处。<br /></p><p><img src="/images/pasted-2.png" alt="upload successful"></p><h2 id="退出与注销"><a href="#退出与注销" class="headerlink" title="退出与注销"></a>退出与注销</h2><p>在 IdentityServer 中注销用户只需要删除身份验证的 cookie，只需在 <code>HttpContext</code> 中调用 <code>SignOutAsync</code>，并传递所使用的方案作为参数：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 IdentityServer 默认的身份验证Cookie</span></span><br><span class="line"><span class="keyword">await</span> HttpContext.SignOutAsync(IdentityServerConstants.DefaultCookieAuthenticationScheme);</span><br></pre></td></tr></table></figure></p><p>当客户端注销时，会跳转到 IdentityServer 注销，其他客户端再次访问 IdentityServer 获取用户授权时才会得知当前用户已注销。<br />如果需要在客户端中注销，并通知其他已登陆的客户端同时注销时。有以下三种方式<br><a name="mhTo0"></a></p><h3 id="前端通道"><a href="#前端通道" class="headerlink" title="前端通道"></a>前端通道</h3><p>当用户进行注销时，IdentityServer 会返回一个带有一个或多个隐藏式 <code>&lt;iframe&gt;</code> 标签的页面。<br />浏览器在注销页面加载完成后会自动调用 <code>iframe</code> 中指定的URL （在 IdentityServer 中通过 <code>FrontChannelLogoutUri</code> 配置）告知对应的客户端程序用户注销。<br />IdentityServer 会跟踪用户已登陆的客户端，当用户注销登录时，IdentityServer 会调用 <code>IIdentityServerInteractionService</code>中的 <code>GetLogoutContextAsync()</code> 方法，<br />并返回一个带有 <code>SignOutIFrameUrl</code> 属性的 <code>LogoutRequest</code> 对象，<code>SignOutIFrameUrl</code> 中包含需要渲染在 <code>&lt;iframe&gt;</code> 上的已登陆客户端信息。<br><a name="WPCkI"></a></p><h3 id="后端通道"><a href="#后端通道" class="headerlink" title="后端通道"></a>后端通道</h3><p>与前端通道类似的，IdentityServer 在用户注销登录时，会调用 <code>IBackChannelLogoutService</code> 中的 <code>HttpContext.SignOutAsync()</code> 进行注销登录。<br />需要同时登出的客户端需要配置 <code>BackChannelLogoutUri</code>。<br><a name="iFu8H"></a></p><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><p>通过会话管理形式进行注销控制的客户端不需要进行执行其他操作，不过客户端会监视 IdentityServer 中的 <code>check_session_iframe</code> 端点，用户登出后，oidc-client JavaScript 库会自动将当前用户注销。</p><p><a name="WCZGx"></a></p><h2 id="客户端注销"><a href="#客户端注销" class="headerlink" title="客户端注销"></a>客户端注销</h2><p>在客户端发起注销登录时，会将当前用户重定向到 IdentityServer 的 <code>end session endpoint</code> 端点上。IdentityServer 会对用户的状态进行维护，并将客户端重定向到对应的URL（如果配置了的话）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2019/11/01/Hexo-Theme-Snail/"/>
      <url>/2019/11/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache License 2.0 Copyright(c) 2018-2020 <a href="https://github.com/dusign" target="_blank" rel="noopener">Dusign</a>   </p><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">hexo-theme-snail</a> is derived from <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro</a> Apache License 2.0. Copyright (c) 2015-2020 Huxpro</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
